
------------------------------------bookcpy del----------------------------------

CREATE OR REPLACE TRIGGER BOOK_COPY_DELETE
AFTER INSERT
ON ORDERS
FOR EACH ROW
DECLARE
QUAN INTEGER;
B_ID INTEGER;
S_ID INTEGER;
X INTEGER;
BEGIN
		X := 0;
		QUAN:= :NEW.QUANTITY;
		B_ID := :NEW.BOOK_ID;
		S_ID:= :NEW.SHOP_ID;
		FOR R IN (SELECT BOOK_COPY_ID FROM BOOK_COPY WHERE BOOK_ID= B_ID AND SHOP_ID= S_ID) 
		LOOP
		DELETE FROM BOOK_COPY WHERE BOOK_COPY_ID= R.BOOK_COPY_ID;
		X := X+1;
		EXIT WHEN X= QUAN;
		END LOOP;
END;

---------------------------------------------------cart del---------------------------
CREATE OR REPLACE TRIGGER CART_DELETE
AFTER INSERT
ON ORDERS
FOR EACH ROW
DECLARE
BEGIN
		DELETE CART_DETAILS
		WHERE BOOK_ID= :NEW.BOOK_ID AND CUSTOMER_ID= :NEW.CUSTOMER_ID;
END;

-------------------------------------------------------earning--------------------------------------
CREATE OR REPLACE TRIGGER earning_update
AFTER INSERT
ON ORDERS
FOR EACH ROW
DECLARE
BEGIN
		UPDATE SHOP
		SET TOTAL_EARNING= TOTAL_EARNING+ :NEW.TOTAL_PRICE
		WHERE SHOP_ID= :NEW.SHOP_ID;
END;

------------------------------------------------qntyty----------------------------------
CREATE OR REPLACE TRIGGER QUANTITY_UPDATE
AFTER INSERT
ON ORDERS
FOR EACH ROW
DECLARE
BEGIN
		UPDATE BOOK
		SET QUANTITY= QUANTITY- :NEW.QUANTITY
		WHERE BOOK_ID= :NEW.BOOK_ID;
END;



----------------------------procedure-----------------------------------------------------

CREATE OR REPLACE PROCEDURE ADD_ORDER(b_id IN INTEGER, c_id IN INTEGER, s_id IN INTEGER, b_quantity IN NUMBER, b_total IN NUMBER, o_transaction IN VARCHAR2, astreet IN VARCHAR2, athana IN VARCHAR2, apostal_code IN VARCHAR2, dname IN VARCHAR2) IS
dist_id INTEGER ;
a_id INTEGER ;
i INTEGER;
j INTEGER;
BEGIN
		--add district
		i := 0;
		FOR R IN (SELECT DISTRICT_NAME FROM DISTRICT) 
		LOOP
				IF UPPER(R.DISTRICT_NAME)= UPPER(dname) THEN
						i :=1;
			  END IF;
				EXIT WHEN i=1; 
		END LOOP;
		IF i=0 THEN
				INSERT INTO DISTRICT(DISTRICT_NAME) VALUES(dname);
		END IF;
		SELECT DISTRICT_ID INTO dist_id FROM DISTRICT WHERE UPPER(DISTRICT_NAME)= UPPER(dname);
		
		--Add_Address
		j := 0;
		FOR R1 IN (SELECT STREET, THANA FROM ADDRESS_DETAIL) 
		LOOP
				IF UPPER(R1.STREET)= UPPER(astreet) AND UPPER(R1.THANA)= UPPER(athana) THEN
						j :=1;
			  END IF;
				EXIT WHEN j=1; 
		END LOOP;
		IF j=0 THEN
				INSERT INTO ADDRESS_DETAIL(street, thana, postal_code, DISTRICT_ID) VALUES(astreet, athana, apostal_code, dist_id);
		END IF;
		SELECT ADDRESS_ID INTO a_id FROM ADDRESS_DETAIL WHERE UPPER(street)= UPPER(astreet) AND UPPER(THANA)= UPPER(athana);
		INSERT INTO ORDERS(BOOK_ID, CUSTOMER_ID, SHOP_ID, QUANTITY, TOTAL_PRICE, TRANSACTION_ID, ADDRESS_ID) VALUES(b_id, c_id, s_id, b_quantity, b_total,o_transaction, a_id);
END;

DECLARE
BEGIN
		ADD_ORDER(10001000, 500, 20021, 3, 660, 'ASSASHSD454', 'Nobinagar', 'Hoogly', 1245, 'Shiliguri');
END;

INSERT INTO CART_DETAILS VALUES(10001001, 500, 20021, 220);

DELETE from cart_details WHERE CUSTOMER_ID=20 and BOOK_ID=10001041;
SELECT * FROM orders;
SELECT * from cart_details ;
SELECT* FROM CART_DETAILS ;
SELECT b1.BOOK_NAME,b1.PRICE_PER_BOOK,b2.BOOK_ID,b2.shop_id,b2.CUSTOMER_ID,s.SHOP_NAME FROM BOOK b1 join (SELECT  BOOK_ID,shop_id,customer_id FROM Cart_details WHERE customer_ID=501) b2
on( b1.BOOK_ID=b2.BOOK_ID)
join (SELECT SHOP_ID,SHOP_NAME from SHOP) s
on( b2.SHOP_ID=s.SHOP_ID );
















